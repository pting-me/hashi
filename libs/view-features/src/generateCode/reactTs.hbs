import { ComponentPropsWithRef, CSSProperties, FC } from 'react';

interface Props extends ComponentPropsWithRef<'div'> {
{{#each (mapPropNames this.variantGroupProperties)}}
  {{#if this.isBoolean}}
    {{this.property}}?: boolean;
  {{/if}}
  {{#if this.isNumber}}
    {{this.property}}: number;
  {{/if}}
  {{#if this.isString}}
    {{this.property}}{{#if this.hasDefaultValue}}?{{/if}}:
    {{#each this.values}}
    | '{{camelCase this}}'
    {{/each}};
  {{/if}}
{{/each}}
}

type VariantProperties = {
  [property: string]: unknown;
} | null;

const serializeProperties = (variantProperties: VariantProperties) => {
  if (!variantProperties) {
    return '';
  }

  const sortedProperties = Object.entries(variantProperties).sort(
    ([aKey], [bKey]) => {
      return aKey.localeCompare(bKey);
    }
  );

  return sortedProperties.reduce(
    (str, [currKey, currVal]) =>
      `${str.toLowerCase()}--${currKey.toLowerCase()}-${String(currVal).toLowerCase()}`,
    ''
  );
};

const getStyles = (serialized: string): CSSProperties => {
  switch (serialized) {
    {{#each (mapComponents this.children)}}
      case '{{this.serialized}}': 
        return {
          borderRadius: '{{this.borderRadius}}',
          backgroundColor: '{{this.backgroundColor}}',
          borderWidth: '{{this.borderWidth}}',
          borderColor: '{{this.borderColor}}',
          borderStyle: '{{this.borderStyle}}',
          padding: '{{this.padding}}',
        };
    {{/each}}
    default:
      return {};
  }
};

const {{pascalCase this.name}}: FC<Props> = (props: Props) => {
  const {
    children,
    {{#each (mapPropNames this.variantGroupProperties)}}
      {{this.property}}
        {{#if this.isBoolean}}=false{{/if}}
        {{#if this.hasDefaultValue}}='default'{{/if}}
      ,
    {{/each}}...rest
  } = props;

  const serialized = serializeProperties({
    {{#each (mapPropNames this.variantGroupProperties)}}
      {{this.property}},
    {{/each}}
  });

  return <div style={getStyles(serialized)} {...rest}>{children}</div>;
};

export default {{pascalCase this.name}};
export type { Props as {{pascalCase this.name}}Props };
