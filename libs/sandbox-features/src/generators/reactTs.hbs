import {
  CSSProperties,
  ComponentPropsWithRef,
  FC,
  ReactElement,
  ReactNode,
} from 'react';

interface NodeProps {
{{#each this.childNodePropNames}}
  {{#if (isInstance this.type)}}
    {{this.name}}?: ReactElement | null;
  {{/if}}
  {{#if (isText this.type)}}
    {{this.name}}?: string;
  {{/if}}
{{/each}}
}

interface Props extends ComponentPropsWithRef<'div'>, NodeProps {
{{#each (mapPropNames this.componentSetNode.variantGroupProperties)}}
  {{#if this.isBoolean}}
    {{this.property}}?: boolean;
  {{/if}}
  {{#if this.isNumber}}
    {{this.property}}: number;
  {{/if}}
  {{#if this.isString}}
    {{this.property}}{{#if this.hasDefaultValue}}?{{/if}}:
    {{#each this.values}}
    | '{{camelCase this}}'
    {{/each}};
  {{/if}}
{{/each}}
}

type VariantProperties = {
  [property: string]: unknown;
} | null;

const serializeProperties = (variantProperties: VariantProperties) => {
  if (!variantProperties) {
    return '';
  }

  const sortedProperties = Object.entries(variantProperties).sort(
    ([aKey], [bKey]) => {
      return aKey.localeCompare(bKey);
    }
  );

  return sortedProperties.reduce(
    (str, [currKey, currVal]) =>
      `${str.toLowerCase()}--${currKey.toLowerCase()}-${String(currVal).toLowerCase()}`,
    ''
  );
};

interface ComputedProps {
  style?: CSSProperties;
  children?: ReactNode;
}

const getProps = (variantProperties: VariantProperties): ComputedProps => {
  const serialized = serializeProperties(variantProperties);
  switch (serialized) {
    {{#each this.mappedComponents}}
    case '{{this.serialized}}': 
      return {
        style: {
          borderRadius: '{{this.borderRadius}}',
          backgroundColor: '{{this.backgroundColor}}',
          borderWidth: '{{this.borderWidth}}',
          borderColor: '{{this.borderColor}}',
          borderStyle: '{{this.borderStyle}}',
          padding: '{{this.padding}}',
        },
        children: <div></div>,
      };
    {{/each}}
    default:
      return {};
  }
};

const {{pascalCase this.componentSetNode.name}}: FC<Props> = (props: Props) => {
  const {
    children: childrenOverride,
    {{#each (mapPropNames this.componentSetNode.variantGroupProperties)}}
      {{this.property}}
        {{#if this.isBoolean}}=false{{/if}}
        {{#if this.hasDefaultValue}}='default'{{/if}}
      ,
    {{/each}}style: styleOverride,
    ...rest
  } = props;

  const { style, children } = getProps({
    size,
    variant,
    icon,
  });

  return (
    <div style={ { ...style, ...styleOverride } } {...rest}>
      {childrenOverride}
    </div>
  );
};

export default {{pascalCase this.componentSetNode.name}};
export type { Props };
