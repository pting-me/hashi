import {
  CSSProperties,
  ComponentPropsWithRef,
  {{#unless this.isForwardRef}}FC,{{/unless}}
  ReactElement,
  ReactNode,
  {{#if this.isForwardRef}}forwardRef,{{/if}}
} from 'react';

// START COMMON SECTION
// This section is the same for all properties.
// You may want to put these in a separate file and import them.

type VariantProperties = {
  [property: string]: unknown;
} | null;

interface ComputedProps {
  style?: CSSProperties;
  children?: ReactNode;
}

const serializeProperties = (variantProperties: VariantProperties) => {
  if (!variantProperties) {
    return '';
  }

  const sortedProperties = Object.entries(variantProperties).sort(
    ([aKey], [bKey]) => {
      return aKey.localeCompare(bKey);
    }
  );

  return sortedProperties.reduce(
    (str, [currKey, currVal]) =>
      `${str.toLowerCase()}--${currKey.toLowerCase()}-${String(currVal).toLowerCase()}`,
    ''
  );
};

// END COMMON SECTION

interface NodeProps {
{{#each this.childNodeProps}}
  {{this.name}}?: {{this.reactTsType}}
{{/each}}
}

interface Props extends ComponentPropsWithRef<'{{this.tagName}}'>, NodeProps {
{{#each this.variantProps}}
  {{this.name}}{{#if this.required}}?{{/if}}: {{{this.reactTsType}}};
{{/each}}
}

interface GetPropsOptions {
  variantProperties: VariantProperties;
  nodeProps: NodeProps;
}

const getProps = (options: GetPropsOptions): ComputedProps => {
  const { variantProperties, nodeProps } = options;
  const {
    {{#each this.childNodeProps}}
      {{this.name}},
    {{/each}}
  } = nodeProps;

  const serialized = serializeProperties(variantProperties);
  switch (serialized) {
    {{#each this.components}}
    case '{{this.serial}}': 
      return {
        style: {{{this.style}}},
        children: {{#if this.shouldRenderInFragment}}<>{{/if}}
          {{#each this.children}}
          <div style={ {{{this.style}}} }>
            { {{this.name}}{{#if this.defaultValue}} ?? {{{this.defaultValue}}}{{/if}} }
          </div>
          {{/each}}
        {{#if this.shouldRenderInFragment}}</>{{/if}},
      };
    {{/each}}
    default:
      return {};
  }
};

{{#if this.isForwardRef}}
const {{this.name}} = forwardRef<{{this.elementTypeName}}, Props>((props: Props, ref) => {
{{/if}}
{{#unless this.isForwardRef}}
const {{this.name}}: FC<Props> = (props: Props) => {
{{/unless}}
  const {
    children: childrenOverride,
    {{#each this.variantProps}}
      {{this.name}}{{#if this.defaultValue}}={{{this.defaultValue}}}{{/if}},
    {{/each}}
    {{#each this.childNodeProps}}
      {{this.name}},
    {{/each}}
    style: styleOverride,
    ...rest
  } = props;

  const { style, children } = getProps({
    variantProperties: {
    {{#each this.variantProps}}
      {{this.name}},
    {{/each}}
    },
    nodeProps: {
    {{#each this.childNodeProps}}
      {{this.name}},
    {{/each}}
    },
  });

  return (
    <{{this.tagName}} style={ { ...style, ...styleOverride } } {...rest}{{#if this.isForwardRef}} ref={ref}{{/if}}>
      {childrenOverride ?? children}
    </{{this.tagName}}>
  );
}{{#if this.isForwardRef}}){{/if}};

export default {{this.name}};
export type { Props };
